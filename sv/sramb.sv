//
// Copyright ï¿½ 2003-11. All rights reserved.
// Binachip, Inc.
// http://www.binachip.com
//
// Generated by :     ESLerate v3.00.00
//
// Date/Time :        Fri Jan 14 13:48:36 2011
//
// Legal Disclaimer : The use of this file is governed by the Binachip, Inc. Software License Agreement.
//


//`timescale 1 ns / 1 ns

module sramb # (

	parameter signed [31:0] SRAMB_BUFFER_SIZE = 1024,
	parameter signed [31:0] SRAMB_ADDR_WIDTH = 10,
	parameter signed [31:0] SRAMB_DATA_WIDTH = 32
	
) (
	input 	logic 								clock,
	input 	logic [(SRAMB_ADDR_WIDTH - 1):0] 	rd_addr,
	input 	logic [(SRAMB_ADDR_WIDTH - 1):0] 	wr_addr,
	input 	logic 								wr_en,
	output 	logic [(SRAMB_DATA_WIDTH - 1):0] 	dout,
	input 	logic [(SRAMB_DATA_WIDTH - 1):0] 	din
);
	
	logic [(SRAMB_DATA_WIDTH - 1):0] mem [0:(SRAMB_BUFFER_SIZE - 1)];
	logic [(SRAMB_ADDR_WIDTH - 1):0] read_addr = 'h0;

	initial begin

		$display("Loading triangles into memory");
		$readmemh("../triangle_data.txt", mem);

	end

	function [383:0] to01;
		input reg [383:0] val;
		integer i;
		reg [383:0] result;
		begin 
			for ( i = 0; i < 384; i = i + 1 )
			begin 
				
				case (val[i])
					1'b0 : result[i] = 1'b0;

					1'b1 : result[i] = 1'b1;

					default : result[i] = 1'b0;

				endcase
			end
			to01 = result;
		end
	endfunction

	always @
	(
		posedge clock
	)
	begin : sramb_write_process
		if (clock == 1'b1) begin 
			if (wr_en == 1'h1) begin 
				mem[to01(wr_addr)] <= to01(din);
			end
			read_addr <= rd_addr;
		end
	end
	assign dout = to01(mem[to01(read_addr)]);

endmodule
